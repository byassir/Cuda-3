/* atof example: sine calculator */
#include <stdio.h>      /* printf, fgets */
#include <stdlib.h>     /* atof */
#include <iostream>
int main (int argc, const char* argv[])
{

	int num_elements = 234345;
	//const size_t block_size = 1024;
	for (int block_size = 1024 ; block_size > 1000 ; block_size--){
		std::cout << "modulus: " << num_elements%block_size << "\n";
		int num_blocks = (num_elements/block_size) + ((num_elements%block_size) ? 1 : 0);
		std::cout << ((num_elements%block_size) ? 1 : 0) << "\n";
		std::cout << "num_blocks: " << num_blocks << "\n";
		std::cout << "remainder: " << num_elements - (num_blocks * block_size) << "\n";
	}

	return 0;
}

//calculate_histo<<<gridSize, blockSize>>>(d_min, d_logLuminance, d_histogram, lumRange, numBins);
__global__
void calculate_histo(const float* const d_logLuminance,
					unsigned int* d_histogram,
					float min_logLum,
					float lumRange,
					int numBins){
	int c = threadIdx.y;
    int r = blockIdx.x;
    int numCols = blockDim.y;
    int gid = r * numCols + c;
    //compute bin value of input
    int bin = static_cast <int> (floor((d_logLuminance[gid]-min_logLum)/ lumRange * numBins));
    //increment histogram at bin value
    atomicAdd(&(d_histogram[bin]), 1);
}



